{"version":3,"file":"static/js/860.f0f1cbd4.chunk.js","mappings":"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","sources":["components/MoviesSearch/MoviesSearch.styled.js","components/MoviesSearch/MoviesSearch.jsx","hooks/useFetchMovies.js"],"sourcesContent":["import styled from 'styled-components';\nimport { Link } from 'react-router-dom';\n\nexport const MoviesSearchTitle = styled.h1`\n  text-align: center;\n`;\n\nexport const MoviesSearchForm = styled.form`\n  display: flex;\n  justify-content: center;\n  column-gap: 12px;\n  max-width: fit-content;\n\n  margin: 0 auto 30px;\n`;\n\nexport const MoviesSearchInput = styled.input`\n  border: 1px solid blue;\n  border-radius: 5px;\n  min-width: 180px;\n  padding: 10px;\n\n  @media screen and (min-width: 480px) {\n    min-width: 250px;\n  }\n\n  @media screen and (min-width: 960px) {\n    min-width: 350px;\n  }\n\n  ::placeholder {\n    color: blue;\n    opacity: 85%;\n    font-weight: 700;\n  }\n`;\n\nexport const MoviesSearchBtn = styled.button`\n  background-color: blue;\n  color: white;\n  border-color: transparent;\n  border-radius: 5px;\n  cursor: pointer;\n  font-weight: 700;\n\n  :hover {\n    background-color: #fff;\n    color: blue;\n    border-color: blue;\n  }\n`;\n\nexport const MoviesSearchList = styled.ul`\n  @media screen and (min-width: 480px) and (max-width: 767px) {\n    display: grid;\n    grid-template-columns: repeat(2, 1fr);\n    gap: 20px 10px;\n  }\n\n  @media screen and (min-width: 768px) and (max-width: 1023px) {\n    display: grid;\n    grid-template-columns: repeat(3, 1fr);\n    gap: 20px 10px;\n  }\n\n  @media screen and (min-width: 1024px) {\n    display: grid;\n    grid-template-columns: repeat(4, 1fr);\n    gap: 20px 10px;\n  }\n`;\n\nexport const MoviesSearchListItem = styled.li`\n  color: black;\n  border-radius: 10px;\n  :hover {\n    background-color: blue;\n    color: white;\n  }\n`;\n\nexport const MoviesSearchPoster = styled.img`\n  /* width: 293px;\n  height: 439px; */\n`;\n\nexport const MoviesSearchName = styled.h3`\n  text-align: center;\n  color: inherit;\n  padding: 0 5px;\n`;\n\nexport const MoviesSearchDate = styled.h4`\n  text-align: center;\n  color: inherit;\n`;\n\nexport const MoviesSearchLink = styled(Link)`\n  text-decoration: none;\n  color: inherit;\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n  height: 100%;\n`;\n\nexport const MoviesSearchFailed = styled.p``;\n","import { useState } from 'react';\nimport { useSearchParams, useLocation } from 'react-router-dom';\nimport useFetchMovies from '../../hooks/useFetchMovies';\nimport Loader from 'components/Loader/Loader';\n\nimport {\n  MoviesSearchTitle,\n  MoviesSearchLink,\n  MoviesSearchInput,\n  MoviesSearchForm,\n  MoviesSearchBtn,\n  MoviesSearchList,\n  MoviesSearchListItem,\n  MoviesSearchPoster,\n  MoviesSearchName,\n  MoviesSearchFailed,\n  MoviesSearchDate,\n} from './MoviesSearch.styled';\n\nconst MoviesSearch = () => {\n  const [query, setQuery] = useState('');\n  const [searchParams, setSearchParams] = useSearchParams('');\n\n  const searchQuery = searchParams.get('query');\n\n  const { data, loading, baseImgUrl } = useFetchMovies('search', searchQuery ? searchQuery : '');\n\n  const location = useLocation();\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    if (query) {\n      setSearchParams({ query });\n      setQuery('');\n    }\n  };\n\n  const onChange = event => {\n    setQuery(event.target.value);\n  };\n\n  function formatDate(dateString) {\n    const date = new Date(dateString);\n    const day = String(date.getDate()).padStart(2, '0');\n    const month = String(date.getMonth() + 1).padStart(2, '0');\n    const year = date.getFullYear();\n    return `${day}/${month}/${year}`;\n  }\n\n  return (\n    <>\n      <MoviesSearchTitle>You can search movie here.</MoviesSearchTitle>\n      <MoviesSearchForm onSubmit={handleSubmit}>\n        <MoviesSearchInput\n          type=\"text\"\n          value={query}\n          onChange={onChange}\n          placeholder=\"Write your query here!\"\n        />\n        <MoviesSearchBtn type=\"submit\">Search</MoviesSearchBtn>\n      </MoviesSearchForm>\n      {loading && <Loader />}\n      {loading || !data || data.results.length > 0 || (\n        <MoviesSearchFailed>Nothing was Found!</MoviesSearchFailed>\n      )}\n      {!loading && data && data.results && data.results.length > 0 && (\n        <MoviesSearchList>\n          {data.results.map(movie => (\n            <MoviesSearchListItem key={`${movie.id}`}>\n              <MoviesSearchLink to={`${movie.id}`} state={{ from: location }}>\n                <MoviesSearchPoster\n                  src={\n                    movie.poster_path\n                      ? `${baseImgUrl}${movie.poster_path}`\n                      : `https://www.themoviedb.org/assets/2/v4/glyphicons/basic/glyphicons-basic-38-picture-grey-c2ebdbb057f2a7614185931650f8cee23fa137b93812ccb132b9df511df1cfac.svg`\n                  }\n                  alt={movie.title}\n                />\n                <MoviesSearchName>{movie.title}</MoviesSearchName>\n                <MoviesSearchDate>{formatDate(movie.release_date)}</MoviesSearchDate>\n              </MoviesSearchLink>\n            </MoviesSearchListItem>\n          ))}\n        </MoviesSearchList>\n      )}\n    </>\n  );\n};\n\nexport default MoviesSearch;\n","import { useState, useEffect } from 'react';\nimport axios from 'axios';\n\nconst useFetchMovies = (typeofFetch, searchQuery = '', movieId = '', page = 1) => {\n  const [data, setData] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  const baseImgUrl = 'https://image.tmdb.org/t/p/w500';\n\n  const apiUrl = (() => {\n    const baseUrl = 'https://api.themoviedb.org/3/';\n    const apiKey = 'da32420fa9f1589cda3e8b28e89608b4';\n\n    switch (typeofFetch) {\n      case 'trending':\n        return `${baseUrl}trending/movie/week?api_key=${apiKey}`;\n      case 'search':\n        return `${baseUrl}search/movie?api_key=${apiKey}&language=en-US&query=${searchQuery}&page=${page}&include_adult=false`;\n      case 'movieInfo':\n        return `${baseUrl}movie/${movieId}?api_key=${apiKey}&language=en-US`;\n      case 'movieCast':\n        return `${baseUrl}movie/${movieId}/credits?api_key=${apiKey}&language=en-US`;\n      case 'movieReviews':\n        return `${baseUrl}movie/${movieId}/reviews?api_key=${apiKey}&language=en-US&page=${page}`;\n      default:\n        return '';\n    }\n  })();\n\n  useEffect(() => {\n    const fetchData = async () => {\n      if (typeofFetch === 'search' && searchQuery === '') {\n        return;\n      }\n      setLoading(true);\n      try {\n        const response = await axios.get(apiUrl);\n        setData(response.data);\n        setLoading(false);\n      } catch (error) {\n        setError(error);\n        error ? console.log(error) : console.log('done');\n        setLoading(false);\n      }\n    };\n\n    fetchData();\n  }, [apiUrl, searchQuery, typeofFetch]);\n\n  return { data, loading, error, baseImgUrl };\n};\n\nexport default useFetchMovies;\n"],"names":["MoviesSearchTitle","styled","MoviesSearchForm","MoviesSearchInput","MoviesSearchBtn","MoviesSearchList","MoviesSearchListItem","MoviesSearchPoster","MoviesSearchName","MoviesSearchDate","MoviesSearchLink","Link","MoviesSearchFailed","useState","query","setQuery","useSearchParams","searchParams","setSearchParams","searchQuery","get","useFetchMovies","data","loading","baseImgUrl","location","useLocation","formatDate","dateString","date","Date","day","String","getDate","padStart","month","getMonth","year","getFullYear","onSubmit","event","preventDefault","type","value","onChange","target","placeholder","Loader","results","length","map","movie","to","id","state","from","src","poster_path","alt","title","release_date","typeofFetch","movieId","page","setData","setLoading","error","setError","apiUrl","baseUrl","apiKey","useEffect","fetchData","axios","response","console","log"],"sourceRoot":""}