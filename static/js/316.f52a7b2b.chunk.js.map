{"version":3,"file":"static/js/316.f52a7b2b.chunk.js","mappings":"kPAEaA,EAAkBC,EAAAA,GAAAA,EAAH,sBAEfC,EAAgBD,EAAAA,GAAAA,GAAH,+cAoBbE,EAAoBF,EAAAA,GAAAA,GAAH,wGAKjBG,EAAkBH,EAAAA,GAAAA,IAAH,wGAMfI,EAAkBJ,EAAAA,GAAAA,IAAH,sBAEfK,EAAgBL,EAAAA,GAAAA,GAAH,sBAEbM,EAAgBN,EAAAA,GAAAA,GAAH,sB,SCS1B,EAlCkB,WAChB,IAAQO,GAAYC,EAAAA,EAAAA,MAAZD,QAER,GAAsCE,EAAAA,EAAAA,GAAe,YAAa,GAAIF,GAA9DG,EAAR,EAAQA,KAAMC,EAAd,EAAcA,QAASC,EAAvB,EAAuBA,WACvB,OACE,gCACGD,IAAW,SAACE,EAAA,EAAD,IACXF,IAAYD,GAAQA,EAAKI,KAAKC,OAAS,IACtC,SAAChB,EAAD,kCAEAY,GAAWD,GAAQA,EAAKI,MAAQJ,EAAKI,KAAKC,OAAS,IACnD,SAACd,EAAD,UACGS,EAAKI,KAAKE,KAAI,SAAAC,GAAK,OAClB,UAACf,EAAD,YACE,SAACE,EAAD,CACEc,IACED,EAAME,aAAN,UACOP,GADP,OACoBK,EAAME,cAD1B,gKAIFC,IAAKH,EAAMI,QAEb,UAAClB,EAAD,YACE,UAACE,EAAD,WAAgBY,EAAMI,KAAtB,QACA,UAACf,EAAD,iBAAmBW,EAAMK,kBAX7B,UAA2BL,EAAMM,IADf,QAoB7B,C,gFCOD,IAlDuB,SAACC,GAA2D,IAA9CC,EAA6C,uDAA/B,GAAIlB,EAA2B,uDAAjB,GAAImB,EAAa,uDAAN,EAC1E,GAAwBC,EAAAA,EAAAA,UAAS,MAAjC,eAAOjB,EAAP,KAAakB,EAAb,KACA,GAA8BD,EAAAA,EAAAA,WAAS,GAAvC,eAAOhB,EAAP,KAAgBkB,EAAhB,KACA,GAA0BF,EAAAA,EAAAA,UAAS,MAAnC,eAAOG,EAAP,KAAcC,EAAd,KAEMnB,EAAa,kCAEboB,EAAU,WACd,IAAMC,EAAU,gCACVC,EAAS,mCAEf,OAAQV,GACN,IAAK,WACH,MAAM,GAAN,OAAUS,EAAV,uCAAgDC,GAClD,IAAK,SACH,MAAM,GAAN,OAAUD,EAAV,gCAAyCC,EAAzC,iCAAwET,EAAxE,iBAA4FC,EAA5F,wBACF,IAAK,YACH,MAAM,GAAN,OAAUO,EAAV,iBAA0B1B,EAA1B,oBAA6C2B,EAA7C,mBACF,IAAK,YACH,MAAM,GAAN,OAAUD,EAAV,iBAA0B1B,EAA1B,4BAAqD2B,EAArD,mBACF,IAAK,eACH,MAAM,GAAN,OAAUD,EAAV,iBAA0B1B,EAA1B,4BAAqD2B,EAArD,gCAAmFR,GACrF,QACE,MAAO,GAEZ,CAlBe,GAwChB,OApBAS,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAS,mCAAG,uFACI,WAAhBZ,GAA4C,KAAhBC,EADhB,wDAIhBI,GAAW,GAJK,kBAMSQ,EAAAA,EAAAA,IAAUL,GANnB,OAMRM,EANQ,OAOdV,EAAQU,EAAS5B,MACjBmB,GAAW,GARG,kDAUdE,EAAS,EAAD,IACR,KAAQQ,QAAQC,IAAR,MAAqBD,QAAQC,IAAI,QACzCX,GAAW,GAZG,0DAAH,qDAgBfO,GACD,GAAE,CAACJ,EAAQP,EAAaD,IAElB,CAAEd,KAAAA,EAAMC,QAAAA,EAASmB,MAAAA,EAAOlB,WAAAA,EAChC,C","sources":["components/MovieCast/MovieCast.styled.js","components/MovieCast/MovieCast.jsx","hooks/useFetchMovies.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const MovieCastFailed = styled.p``;\n\nexport const MovieCastList = styled.ul`\n  @media screen and (min-width: 480px) and (max-width: 767px) {\n    display: grid;\n    grid-template-columns: 1fr 1fr;\n    gap: 20px 10px;\n  }\n\n  @media screen and (min-width: 768px) and (max-width: 1023px) {\n    display: grid;\n    grid-template-columns: 1fr 1fr 1fr;\n    gap: 20px 10px;\n  }\n\n  @media screen and (min-width: 1024px) {\n    display: grid;\n    grid-template-columns: 1fr 1fr 1fr 1fr;\n    gap: 20px 10px;\n  }\n`;\n\nexport const MovieCastListItem = styled.li`\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n`;\nexport const MovieCastPerson = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n`;\n\nexport const MovieCastPoster = styled.img``;\n\nexport const MovieCastName = styled.h3``;\n\nexport const MovieCastRole = styled.h4``;\n","import { useParams } from 'react-router-dom';\nimport useFetchMovies from 'hooks/useFetchMovies';\nimport Loader from 'components/Loader/Loader';\n\nimport {\n  MovieCastFailed,\n  MovieCastList,\n  MovieCastListItem,\n  MovieCastPoster,\n  MovieCastPerson,\n  MovieCastName,\n  MovieCastRole,\n} from './MovieCast.styled';\n\nconst MovieCast = () => {\n  const { movieId } = useParams();\n\n  const { data, loading, baseImgUrl } = useFetchMovies('movieCast', '', movieId);\n  return (\n    <>\n      {loading && <Loader />}\n      {loading || !data || data.cast.length > 0 || (\n        <MovieCastFailed>Nothing was Found!</MovieCastFailed>\n      )}\n      {!loading && data && data.cast && data.cast.length > 0 && (\n        <MovieCastList>\n          {data.cast.map(actor => (\n            <MovieCastListItem key={`${actor.id}`}>\n              <MovieCastPoster\n                src={\n                  actor.profile_path\n                    ? `${baseImgUrl}${actor.profile_path}`\n                    : `https://www.themoviedb.org/assets/2/v4/glyphicons/basic/glyphicons-basic-38-picture-grey-c2ebdbb057f2a7614185931650f8cee23fa137b93812ccb132b9df511df1cfac.svg`\n                }\n                alt={actor.name}\n              />\n              <MovieCastPerson>\n                <MovieCastName>{actor.name}:</MovieCastName>\n                <MovieCastRole>as {actor.character}</MovieCastRole>\n              </MovieCastPerson>\n            </MovieCastListItem>\n          ))}\n        </MovieCastList>\n      )}\n    </>\n  );\n};\n\nexport default MovieCast;\n","import { useState, useEffect } from 'react';\nimport axios from 'axios';\n\nconst useFetchMovies = (typeofFetch, searchQuery = '', movieId = '', page = 1) => {\n  const [data, setData] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  const baseImgUrl = 'https://image.tmdb.org/t/p/w500';\n\n  const apiUrl = (() => {\n    const baseUrl = 'https://api.themoviedb.org/3/';\n    const apiKey = 'da32420fa9f1589cda3e8b28e89608b4';\n\n    switch (typeofFetch) {\n      case 'trending':\n        return `${baseUrl}trending/movie/week?api_key=${apiKey}`;\n      case 'search':\n        return `${baseUrl}search/movie?api_key=${apiKey}&language=en-US&query=${searchQuery}&page=${page}&include_adult=false`;\n      case 'movieInfo':\n        return `${baseUrl}movie/${movieId}?api_key=${apiKey}&language=en-US`;\n      case 'movieCast':\n        return `${baseUrl}movie/${movieId}/credits?api_key=${apiKey}&language=en-US`;\n      case 'movieReviews':\n        return `${baseUrl}movie/${movieId}/reviews?api_key=${apiKey}&language=en-US&page=${page}`;\n      default:\n        return '';\n    }\n  })();\n\n  useEffect(() => {\n    const fetchData = async () => {\n      if (typeofFetch === 'search' && searchQuery === '') {\n        return;\n      }\n      setLoading(true);\n      try {\n        const response = await axios.get(apiUrl);\n        setData(response.data);\n        setLoading(false);\n      } catch (error) {\n        setError(error);\n        error ? console.log(error) : console.log('done');\n        setLoading(false);\n      }\n    };\n\n    fetchData();\n  }, [apiUrl, searchQuery, typeofFetch]);\n\n  return { data, loading, error, baseImgUrl };\n};\n\nexport default useFetchMovies;\n"],"names":["MovieCastFailed","styled","MovieCastList","MovieCastListItem","MovieCastPerson","MovieCastPoster","MovieCastName","MovieCastRole","movieId","useParams","useFetchMovies","data","loading","baseImgUrl","Loader","cast","length","map","actor","src","profile_path","alt","name","character","id","typeofFetch","searchQuery","page","useState","setData","setLoading","error","setError","apiUrl","baseUrl","apiKey","useEffect","fetchData","axios","response","console","log"],"sourceRoot":""}