{"version":3,"file":"static/js/191.49d41f8c.chunk.js","mappings":"wPAGaA,EAAuBC,EAAAA,GAAAA,GAAH,+CAIpBC,EAAqBD,EAAAA,GAAAA,GAAH,+cAoBlBE,EAAyBF,EAAAA,GAAAA,GAAH,sBAEtBG,GAAiBH,EAAAA,EAAAA,IAAOI,EAAAA,GAAPJ,CAAH,sBAEdK,EAAmBL,EAAAA,GAAAA,IAAH,sBAEhBM,EAAkBN,EAAAA,GAAAA,GAAH,+C,SCO5B,EA3BuB,WACrB,OAA6BO,EAAAA,EAAAA,GAAe,YAApCC,EAAR,EAAQA,KAAMC,EAAd,EAAcA,WACRC,GAAWC,EAAAA,EAAAA,MAIjB,OACE,iCACE,SAACZ,EAAD,sDACCS,GACC,SAACP,EAAD,UACGO,EAAKI,QAAQC,KAAI,SAAAC,GAAK,OACrB,SAACZ,EAAD,WACE,UAACC,EAAD,CAAgBY,GAAE,kBAAaD,EAAME,IAAMC,MAAO,CAAEC,KAAMR,GAA1D,WACE,SAACL,EAAD,CAAkBc,IAAG,UAAKV,GAAL,OAAkBK,EAAMM,aAAeC,IAAKP,EAAMQ,SACvE,SAAChB,EAAD,UAAkBQ,EAAMQ,YAH5B,UAAgCR,EAAME,IADjB,OAUzB,SAACO,EAAA,EAAD,MAIP,C,gFCeD,IAlDuB,SAACC,GAA2D,IAA9CC,EAA6C,uDAA/B,GAAIC,EAA2B,uDAAjB,GAAIC,EAAa,uDAAN,EAC1E,GAAwBC,EAAAA,EAAAA,UAAS,MAAjC,eAAOpB,EAAP,KAAaqB,EAAb,KACA,GAA8BD,EAAAA,EAAAA,WAAS,GAAvC,eAAOE,EAAP,KAAgBC,EAAhB,KACA,GAA0BH,EAAAA,EAAAA,UAAS,MAAnC,eAAOI,EAAP,KAAcC,EAAd,KAEMxB,EAAa,kCAEbyB,EAAU,WACd,IAAMC,EAAU,gCACVC,EAAS,mCAEf,OAAQZ,GACN,IAAK,WACH,MAAM,GAAN,OAAUW,EAAV,uCAAgDC,GAClD,IAAK,SACH,MAAM,GAAN,OAAUD,EAAV,gCAAyCC,EAAzC,iCAAwEX,EAAxE,iBAA4FE,EAA5F,wBACF,IAAK,YACH,MAAM,GAAN,OAAUQ,EAAV,iBAA0BT,EAA1B,oBAA6CU,EAA7C,mBACF,IAAK,YACH,MAAM,GAAN,OAAUD,EAAV,iBAA0BT,EAA1B,4BAAqDU,EAArD,mBACF,IAAK,eACH,MAAM,GAAN,OAAUD,EAAV,iBAA0BT,EAA1B,4BAAqDU,EAArD,gCAAmFT,GACrF,QACE,MAAO,GAEZ,CAlBe,GAwChB,OApBAU,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAS,mCAAG,uFACI,WAAhBd,GAA4C,KAAhBC,EADhB,wDAIhBM,GAAW,GAJK,kBAMSQ,EAAAA,EAAAA,IAAUL,GANnB,OAMRM,EANQ,OAOdX,EAAQW,EAAShC,MACjBuB,GAAW,GARG,kDAUdE,EAAS,EAAD,IACR,KAAQQ,QAAQC,IAAR,MAAqBD,QAAQC,IAAI,QACzCX,GAAW,GAZG,0DAAH,qDAgBfO,GACD,GAAE,CAACJ,EAAQT,EAAaD,IAElB,CAAEhB,KAAAA,EAAMsB,QAAAA,EAASE,MAAAA,EAAOvB,WAAAA,EAChC,C","sources":["components/MoviesTrending/MoviesTrending.styled.js","components/MoviesTrending/MoviesTrending.jsx","hooks/useFetchMovies.js"],"sourcesContent":["import styled from 'styled-components';\nimport { Link } from 'react-router-dom';\n\nexport const MoviesTrendingHeader = styled.h1`\n  text-align: center;\n`;\n\nexport const MoviesTrendingList = styled.ul`\n  @media screen and (min-width: 480px) and (max-width: 767px) {\n    display: grid;\n    grid-template-columns: 1fr 1fr;\n    gap: 20px 10px;\n  }\n\n  @media screen and (min-width: 768px) and (max-width: 1023px) {\n    display: grid;\n    grid-template-columns: 1fr 1fr 1fr;\n    gap: 20px 10px;\n  }\n\n  @media screen and (min-width: 1024px) {\n    display: grid;\n    grid-template-columns: 1fr 1fr 1fr 1fr;\n    gap: 20px 10px;\n  }\n`;\n\nexport const MoviesTrendingListItem = styled.li``;\n\nexport const MovieTrendLink = styled(Link)``;\n\nexport const MovieTrendPoster = styled.img``;\n\nexport const MovieTrendTitle = styled.h3`\n  text-align: center;\n`;\n","import { useLocation } from 'react-router-dom';\nimport useFetchMovies from '../../hooks/useFetchMovies';\nimport Loader from 'components/Loader/Loader';\n\nimport {\n  MoviesTrendingHeader,\n  MoviesTrendingList,\n  MoviesTrendingListItem,\n  MovieTrendLink,\n  MovieTrendPoster,\n  MovieTrendTitle,\n} from './MoviesTrending.styled';\n\nconst MoviesTrending = () => {\n  const { data, baseImgUrl } = useFetchMovies('trending');\n  const location = useLocation();\n  // console.log(loading);\n  // console.log(data);\n\n  return (\n    <>\n      <MoviesTrendingHeader>Hello! You can see popular movies here.</MoviesTrendingHeader>\n      {data ? (\n        <MoviesTrendingList>\n          {data.results.map(movie => (\n            <MoviesTrendingListItem key={`${movie.id}`}>\n              <MovieTrendLink to={`/movies/${movie.id}`} state={{ from: location }}>\n                <MovieTrendPoster src={`${baseImgUrl}${movie.poster_path}`} alt={movie.title} />\n                <MovieTrendTitle>{movie.title}</MovieTrendTitle>\n              </MovieTrendLink>\n            </MoviesTrendingListItem>\n          ))}\n        </MoviesTrendingList>\n      ) : (\n        <Loader />\n      )}\n    </>\n  );\n};\n\nexport default MoviesTrending;\n","import { useState, useEffect } from 'react';\nimport axios from 'axios';\n\nconst useFetchMovies = (typeofFetch, searchQuery = '', movieId = '', page = 1) => {\n  const [data, setData] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  const baseImgUrl = 'https://image.tmdb.org/t/p/w500';\n\n  const apiUrl = (() => {\n    const baseUrl = 'https://api.themoviedb.org/3/';\n    const apiKey = 'da32420fa9f1589cda3e8b28e89608b4';\n\n    switch (typeofFetch) {\n      case 'trending':\n        return `${baseUrl}trending/movie/week?api_key=${apiKey}`;\n      case 'search':\n        return `${baseUrl}search/movie?api_key=${apiKey}&language=en-US&query=${searchQuery}&page=${page}&include_adult=false`;\n      case 'movieInfo':\n        return `${baseUrl}movie/${movieId}?api_key=${apiKey}&language=en-US`;\n      case 'movieCast':\n        return `${baseUrl}movie/${movieId}/credits?api_key=${apiKey}&language=en-US`;\n      case 'movieReviews':\n        return `${baseUrl}movie/${movieId}/reviews?api_key=${apiKey}&language=en-US&page=${page}`;\n      default:\n        return '';\n    }\n  })();\n\n  useEffect(() => {\n    const fetchData = async () => {\n      if (typeofFetch === 'search' && searchQuery === '') {\n        return;\n      }\n      setLoading(true);\n      try {\n        const response = await axios.get(apiUrl);\n        setData(response.data);\n        setLoading(false);\n      } catch (error) {\n        setError(error);\n        error ? console.log(error) : console.log('done');\n        setLoading(false);\n      }\n    };\n\n    fetchData();\n  }, [apiUrl, searchQuery, typeofFetch]);\n\n  return { data, loading, error, baseImgUrl };\n};\n\nexport default useFetchMovies;\n"],"names":["MoviesTrendingHeader","styled","MoviesTrendingList","MoviesTrendingListItem","MovieTrendLink","Link","MovieTrendPoster","MovieTrendTitle","useFetchMovies","data","baseImgUrl","location","useLocation","results","map","movie","to","id","state","from","src","poster_path","alt","title","Loader","typeofFetch","searchQuery","movieId","page","useState","setData","loading","setLoading","error","setError","apiUrl","baseUrl","apiKey","useEffect","fetchData","axios","response","console","log"],"sourceRoot":""}