{"version":3,"file":"static/js/424.e3fc46bf.chunk.js","mappings":"gPAEaA,EAAqBC,EAAAA,GAAAA,EAAH,sBAElBC,EAAmBD,EAAAA,GAAAA,GAAH,sBAEhBE,EAAuBF,EAAAA,GAAAA,GAAH,sBAEpBG,EAAmBH,EAAAA,GAAAA,GAAH,sBAEhBI,EAAmBJ,EAAAA,GAAAA,EAAH,sBAEhBK,EAAmBL,EAAAA,GAAAA,EAAH,uD,SCgC7B,EAhCqB,WACnB,IAAQM,GAAYC,EAAAA,EAAAA,MAAZD,QASR,GAA0BE,EAAAA,EAAAA,GAAe,eAAgB,GAAIF,GAArDG,EAAR,EAAQA,KAAMC,EAAd,EAAcA,QACd,OACE,gCACGA,IAAW,SAACC,EAAA,EAAD,IACXD,IAAYD,GAAQA,EAAKG,QAAQC,OAAS,IACzC,SAACd,EAAD,kCAEAW,GAAWD,GAAQA,EAAKG,SAAWH,EAAKG,QAAQC,OAAS,IACzD,SAACZ,EAAD,UACGQ,EAAKG,QAAQE,KAAI,SAAAC,GAAM,OACtB,UAACb,EAAD,YACE,UAACC,EAAD,WAAmBY,EAAOC,OAA1B,QACA,SAACZ,EAAD,UAAmBW,EAAOE,WAC1B,SAACZ,EAAD,WApBOa,EAoBuBH,EAAOI,WAnB/B,IAAIC,KAAKF,GAEKG,mBAAmB,QADjC,CAAEC,IAAK,UAAWC,MAAO,UAAWC,KAAM,iBAelD,UAA8BT,EAAOU,KAjB5B,IAAAP,CAgBa,QAWjC,C,gFCWD,IAlDuB,SAACQ,GAA2D,IAA9CC,EAA6C,uDAA/B,GAAIrB,EAA2B,uDAAjB,GAAIsB,EAAa,uDAAN,EAC1E,GAAwBC,EAAAA,EAAAA,UAAS,MAAjC,eAAOpB,EAAP,KAAaqB,EAAb,KACA,GAA8BD,EAAAA,EAAAA,WAAS,GAAvC,eAAOnB,EAAP,KAAgBqB,EAAhB,KACA,GAA0BF,EAAAA,EAAAA,UAAS,MAAnC,eAAOG,EAAP,KAAcC,EAAd,KAEMC,EAAa,kCAEbC,EAAU,WACd,IAAMC,EAAU,gCACVC,EAAS,mCAEf,OAAQX,GACN,IAAK,WACH,MAAM,GAAN,OAAUU,EAAV,uCAAgDC,GAClD,IAAK,SACH,MAAM,GAAN,OAAUD,EAAV,gCAAyCC,EAAzC,iCAAwEV,EAAxE,iBAA4FC,EAA5F,wBACF,IAAK,YACH,MAAM,GAAN,OAAUQ,EAAV,iBAA0B9B,EAA1B,oBAA6C+B,EAA7C,mBACF,IAAK,YACH,MAAM,GAAN,OAAUD,EAAV,iBAA0B9B,EAA1B,4BAAqD+B,EAArD,mBACF,IAAK,eACH,MAAM,GAAN,OAAUD,EAAV,iBAA0B9B,EAA1B,4BAAqD+B,EAArD,gCAAmFT,GACrF,QACE,MAAO,GAEZ,CAlBe,GAwChB,OApBAU,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAS,mCAAG,uFACI,WAAhBb,GAA4C,KAAhBC,EADhB,wDAIhBI,GAAW,GAJK,kBAMSS,EAAAA,EAAAA,IAAUL,GANnB,OAMRM,EANQ,OAOdX,EAAQW,EAAShC,MACjBsB,GAAW,GARG,kDAUdE,EAAS,EAAD,IACR,KAAQS,QAAQC,IAAR,MAAqBD,QAAQC,IAAI,QACzCZ,GAAW,GAZG,0DAAH,qDAgBfQ,GACD,GAAE,CAACJ,EAAQR,EAAaD,IAElB,CAAEjB,KAAAA,EAAMC,QAAAA,EAASsB,MAAAA,EAAOE,WAAAA,EAChC,C","sources":["components/MovieReviews/MovieReviews.styled.js","components/MovieReviews/MovieReviews.jsx","hooks/useFetchMovies.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const MovieReviewsFailed = styled.p``;\n\nexport const MovieReviewsList = styled.ul``;\n\nexport const MovieReviewsListItem = styled.li``;\n\nexport const MovieReviewsName = styled.h3``;\n\nexport const MovieReviewsText = styled.p``;\n\nexport const MovieReviewsDate = styled.p`\n  text-decoration: underline;\n`;\n","import { useParams } from 'react-router-dom';\nimport useFetchMovies from 'hooks/useFetchMovies';\nimport Loader from 'components/Loader/Loader';\nimport {\n  MovieReviewsFailed,\n  MovieReviewsList,\n  MovieReviewsListItem,\n  MovieReviewsName,\n  MovieReviewsText,\n  MovieReviewsDate,\n} from './MovieReviews.styled';\n\nconst MovieReviews = () => {\n  const { movieId } = useParams();\n\n  const formatDate = date => {\n    const dateObj = new Date(date);\n    const options = { day: '2-digit', month: '2-digit', year: 'numeric' };\n    const dateFormatted = dateObj.toLocaleDateString('en-GB', options);\n    return dateFormatted;\n  };\n\n  const { data, loading } = useFetchMovies('movieReviews', '', movieId);\n  return (\n    <>\n      {loading && <Loader />}\n      {loading || !data || data.results.length > 0 || (\n        <MovieReviewsFailed>Nothing was Found!</MovieReviewsFailed>\n      )}\n      {!loading && data && data.results && data.results.length > 0 && (\n        <MovieReviewsList>\n          {data.results.map(review => (\n            <MovieReviewsListItem key={`${review.id}`}>\n              <MovieReviewsName>{review.author}:</MovieReviewsName>\n              <MovieReviewsText>{review.content}</MovieReviewsText>\n              <MovieReviewsDate>{formatDate(review.created_at)}</MovieReviewsDate>\n            </MovieReviewsListItem>\n          ))}\n        </MovieReviewsList>\n      )}\n    </>\n  );\n};\n\nexport default MovieReviews;\n","import { useState, useEffect } from 'react';\nimport axios from 'axios';\n\nconst useFetchMovies = (typeofFetch, searchQuery = '', movieId = '', page = 1) => {\n  const [data, setData] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  const baseImgUrl = 'https://image.tmdb.org/t/p/w500';\n\n  const apiUrl = (() => {\n    const baseUrl = 'https://api.themoviedb.org/3/';\n    const apiKey = 'da32420fa9f1589cda3e8b28e89608b4';\n\n    switch (typeofFetch) {\n      case 'trending':\n        return `${baseUrl}trending/movie/week?api_key=${apiKey}`;\n      case 'search':\n        return `${baseUrl}search/movie?api_key=${apiKey}&language=en-US&query=${searchQuery}&page=${page}&include_adult=false`;\n      case 'movieInfo':\n        return `${baseUrl}movie/${movieId}?api_key=${apiKey}&language=en-US`;\n      case 'movieCast':\n        return `${baseUrl}movie/${movieId}/credits?api_key=${apiKey}&language=en-US`;\n      case 'movieReviews':\n        return `${baseUrl}movie/${movieId}/reviews?api_key=${apiKey}&language=en-US&page=${page}`;\n      default:\n        return '';\n    }\n  })();\n\n  useEffect(() => {\n    const fetchData = async () => {\n      if (typeofFetch === 'search' && searchQuery === '') {\n        return;\n      }\n      setLoading(true);\n      try {\n        const response = await axios.get(apiUrl);\n        setData(response.data);\n        setLoading(false);\n      } catch (error) {\n        setError(error);\n        error ? console.log(error) : console.log('done');\n        setLoading(false);\n      }\n    };\n\n    fetchData();\n  }, [apiUrl, searchQuery, typeofFetch]);\n\n  return { data, loading, error, baseImgUrl };\n};\n\nexport default useFetchMovies;\n"],"names":["MovieReviewsFailed","styled","MovieReviewsList","MovieReviewsListItem","MovieReviewsName","MovieReviewsText","MovieReviewsDate","movieId","useParams","useFetchMovies","data","loading","Loader","results","length","map","review","author","content","date","created_at","Date","toLocaleDateString","day","month","year","id","typeofFetch","searchQuery","page","useState","setData","setLoading","error","setError","baseImgUrl","apiUrl","baseUrl","apiKey","useEffect","fetchData","axios","response","console","log"],"sourceRoot":""}