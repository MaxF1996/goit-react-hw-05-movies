{"version":3,"file":"static/js/860.57c4e250.chunk.js","mappings":"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","sources":["components/MoviesSearch/MoviesSearch.styled.js","components/MoviesSearch/MoviesSearch.jsx","hooks/useFetchMovies.js"],"sourcesContent":["import styled from 'styled-components';\nimport { Link } from 'react-router-dom';\n\nexport const MoviesSearchTitle = styled.h1`\n  text-align: center;\n`;\n\nexport const MoviesSearchForm = styled.form``;\n\nexport const MoviesSearchInput = styled.input``;\n\nexport const MoviesSearchBtn = styled.button``;\n\nexport const MoviesSearchList = styled.ul`\n  @media screen and (min-width: 480px) and (max-width: 767px) {\n    display: grid;\n    grid-template-columns: 1fr 1fr;\n    gap: 20px 10px;\n  }\n\n  @media screen and (min-width: 768px) and (max-width: 1023px) {\n    display: grid;\n    grid-template-columns: 1fr 1fr 1fr;\n    gap: 20px 10px;\n  }\n\n  @media screen and (min-width: 1024px) {\n    display: grid;\n    grid-template-columns: 1fr 1fr 1fr 1fr;\n    gap: 20px 10px;\n  }\n`;\n\nexport const MoviesSearchListItem = styled.li``;\n\nexport const MoviesSearchPoster = styled.img``;\n\nexport const MoviesSearchName = styled.h3``;\n\nexport const MoviesSearchLink = styled(Link)``;\n\nexport const MoviesSearchFailed = styled.p``;\n","import { useState } from 'react';\nimport { useSearchParams, useLocation } from 'react-router-dom';\nimport useFetchMovies from '../../hooks/useFetchMovies';\nimport Loader from 'components/Loader/Loader';\n\nimport {\n  MoviesSearchTitle,\n  MoviesSearchLink,\n  MoviesSearchInput,\n  MoviesSearchForm,\n  MoviesSearchBtn,\n  MoviesSearchList,\n  MoviesSearchListItem,\n  MoviesSearchPoster,\n  MoviesSearchName,\n  MoviesSearchFailed,\n} from './MoviesSearch.styled';\n\nconst MoviesSearch = () => {\n  const [query, setQuery] = useState('');\n  const [searchParams, setSearchParams] = useSearchParams('');\n\n  const searchQuery = searchParams.get('query');\n\n  const { data, loading, baseImgUrl } = useFetchMovies('search', searchQuery ? searchQuery : '');\n\n  const location = useLocation();\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    if (query) {\n      setSearchParams({ query });\n      setQuery('');\n    }\n  };\n\n  const onChange = event => {\n    setQuery(event.target.value);\n  };\n\n  return (\n    <>\n      <MoviesSearchTitle>You can search movie here.</MoviesSearchTitle>\n      <MoviesSearchForm onSubmit={handleSubmit}>\n        <MoviesSearchInput type=\"text\" value={query} onChange={onChange} />\n        <MoviesSearchBtn type=\"submit\">Search</MoviesSearchBtn>\n      </MoviesSearchForm>\n      {loading && <Loader />}\n      {loading || !data || data.results.length > 0 || (\n        <MoviesSearchFailed>Nothing was Found!</MoviesSearchFailed>\n      )}\n      {!loading && data && data.results && data.results.length > 0 && (\n        <MoviesSearchList>\n          {data.results.map(movie => (\n            <MoviesSearchListItem key={`${movie.id}`}>\n              <MoviesSearchLink to={`${movie.id}`} state={{ from: location }}>\n                <MoviesSearchPoster src={`${baseImgUrl}${movie.poster_path}`} alt={movie.title} />\n                <MoviesSearchName>{movie.title}</MoviesSearchName>\n              </MoviesSearchLink>\n            </MoviesSearchListItem>\n          ))}\n        </MoviesSearchList>\n      )}\n    </>\n  );\n};\n\nexport default MoviesSearch;\n","import { useState, useEffect } from 'react';\nimport axios from 'axios';\n\nconst useFetchMovies = (typeofFetch, searchQuery = '', movieId = '', page = 1) => {\n  const [data, setData] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  const baseImgUrl = 'https://image.tmdb.org/t/p/w500';\n\n  const apiUrl = (() => {\n    const baseUrl = 'https://api.themoviedb.org/3/';\n    const apiKey = 'da32420fa9f1589cda3e8b28e89608b4';\n\n    switch (typeofFetch) {\n      case 'trending':\n        return `${baseUrl}trending/movie/week?api_key=${apiKey}`;\n      case 'search':\n        return `${baseUrl}search/movie?api_key=${apiKey}&language=en-US&query=${searchQuery}&page=${page}&include_adult=false`;\n      case 'movieInfo':\n        return `${baseUrl}movie/${movieId}?api_key=${apiKey}&language=en-US`;\n      case 'movieCast':\n        return `${baseUrl}movie/${movieId}/credits?api_key=${apiKey}&language=en-US`;\n      case 'movieReviews':\n        return `${baseUrl}movie/${movieId}/reviews?api_key=${apiKey}&language=en-US&page=${page}`;\n      default:\n        return '';\n    }\n  })();\n\n  useEffect(() => {\n    const fetchData = async () => {\n      if (typeofFetch === 'search' && searchQuery === '') {\n        return;\n      }\n      setLoading(true);\n      try {\n        const response = await axios.get(apiUrl);\n        setData(response.data);\n        setLoading(false);\n      } catch (error) {\n        setError(error);\n        error ? console.log(error) : console.log('done');\n        setLoading(false);\n      }\n    };\n\n    fetchData();\n  }, [apiUrl, searchQuery, typeofFetch]);\n\n  return { data, loading, error, baseImgUrl };\n};\n\nexport default useFetchMovies;\n"],"names":["MoviesSearchTitle","styled","MoviesSearchForm","MoviesSearchInput","MoviesSearchBtn","MoviesSearchList","MoviesSearchListItem","MoviesSearchPoster","MoviesSearchName","MoviesSearchLink","Link","MoviesSearchFailed","useState","query","setQuery","useSearchParams","searchParams","setSearchParams","searchQuery","get","useFetchMovies","data","loading","baseImgUrl","location","useLocation","onSubmit","event","preventDefault","type","value","onChange","target","Loader","results","length","map","movie","to","id","state","from","src","poster_path","alt","title","typeofFetch","movieId","page","setData","setLoading","error","setError","apiUrl","baseUrl","apiKey","useEffect","fetchData","axios","response","console","log"],"sourceRoot":""}